const fs = require('fs');
const jsesc = require('jsesc');
const minifyHtml = require('html-minifier').minify;
const parseCsv = require('csv-parse/lib/sync');
const template = require('lodash.template');

const HTML_TEMPLATE = fs.readFileSync('./templates/chart.template', 'utf8');
const createHtml = template(HTML_TEMPLATE, {
  interpolate: /<%=([\s\S]+?)%>/g,
  imports: {
    generateScript: generateScript,
    perMille: perMille,
  },
});

const csv = fs.readFileSync('./data/data.csv', 'utf8');

const records = parseCsv(csv, {
  columns: true,
});

const states = new Set();
const map = new Map();
let maxCount = 0;
let latestDate = '1970-01-01';
for (const {date, state, vaccinationsCumulative, vaccinationsPerMille} of records) {
  states.add(state);
  const count = Number(vaccinationsCumulative);
  if (count > maxCount) {
    maxCount = count;
  }
  if (date > latestDate) {
    latestDate = date;
  }
  const perMille = Number(vaccinationsPerMille);
  if (!map.has(date)) {
    map.set(date, new Map());
  }
  map.get(date).set(state, {
    cumulative: count,
    perMille: perMille,
  });
}

const formatter = new Intl.NumberFormat('en', {
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
});
function perMille(state) {
  const latestEntries = map.get(latestDate);
  const latestStateEntries = latestEntries.get(state);
  const perMille = latestStateEntries.perMille;
  return formatter.format(perMille);
}

function generateScript(desiredState = '') {
  const isCumulativeStateChart = Boolean(desiredState);
  const type = isCumulativeStateChart ? 'cumulative' : 'perMille';
  const header = [];
  for (const state of states) {
    if (isCumulativeStateChart && state !== desiredState) {
      continue;
    }
    header.push(`
      data.addColumn('number', ${ jsesc(state, { wrap: true }) });
    `.trim());
  }

  const body = [`data.addRows([`];
  for (const [date, entry] of map) {
    const counts = [];
    for (const state of states) { // Guarantee consistent ordering.
      if (isCumulativeStateChart && state !== desiredState) {
        continue;
      }
      const count = entry.get(state);
      counts.push(count[type]);
    }
    body.push(`
      [${ jsesc(date, { wrap: true }) }, ${counts.join(', ')}],
    `.trim());
  }
  body.push(`]);`)

  const output = header.join('\n') + '\n' + body.join('\n');
  return output;
}

const html = createHtml({
  states: states,
  max: Number(`1${'0'.repeat(String(maxCount).length)}`),
});
const minified = minifyHtml(html, {
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: false,
  collapseWhitespace: true,
  conservativeCollapse: false,
  decodeEntities: true,
  html5: true,
  includeAutoGeneratedTags: false,
  minifyCSS: true,
  minifyJS: true,
  preserveLineBreaks: false,
  preventAttributesEscaping: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeEmptyAttributes: true,
  removeEmptyElements: false,
  removeOptionalTags: true,
  removeRedundantAttributes: true,
  removeTagWhitespace: false,
  sortAttributes: true,
  sortClassName: true,
});
fs.writeFileSync('./index.html', minified);

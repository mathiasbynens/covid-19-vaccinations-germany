const fs = require('fs');
const jsesc = require('jsesc');
const minifyHtml = require('html-minifier').minify;
const parseCsv = require('csv-parse/lib/sync');
const template = require('lodash.template');

const HTML_TEMPLATE = fs.readFileSync('./templates/chart.template', 'utf8');
const createHtml = template(HTML_TEMPLATE, {
	interpolate: /<%=([\s\S]+?)%>/g,
});

const csv = fs.readFileSync('./data/data.csv', 'utf8');

const records = parseCsv(csv, {
  columns: true,
});

const states = new Set();
const map = new Map();
for (const {date, state, vaccinationsCumulative} of records) {
  states.add(state);
  const count = Number(vaccinationsCumulative);
  if (!map.has(date)) {
    map.set(date, new Map());
  }
  map.get(date).set(state, count);
}

const header = [];
for (const state of states) {
  header.push(`
    data.addColumn('number', ${ jsesc(state, { wrap: true }) });
  `.trim());
}

const body = [`data.addRows([`];
for (const [date, entry] of map) {
  const counts = [];
  for (const state of states) { // Guarantee consistent ordering.
    const count = entry.get(state);
    counts.push(count);
  }
  body.push(`
    [new Date(${ jsesc(date, { wrap: true }) }), ${counts.join(', ')}],
  `.trim());
}
body.push(`]);`)

const output = header.join('\n') + '\n' + body.join('\n');
const html = createHtml({ code: output });
const minified = minifyHtml(html, {
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: false,
  collapseWhitespace: true,
  conservativeCollapse: false,
  decodeEntities: true,
  html5: true,
  includeAutoGeneratedTags: false,
  minifyCSS: true,
  minifyJS: true,
  preserveLineBreaks: false,
  preventAttributesEscaping: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeEmptyAttributes: true,
  removeEmptyElements: false,
  removeOptionalTags: true,
  removeRedundantAttributes: true,
  removeTagWhitespace: false,
  sortAttributes: true,
  sortClassName: true,
});
fs.writeFileSync('./index.html', minified);
